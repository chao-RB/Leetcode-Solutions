/**
Reverse bits of a given 32 bits unsigned integer.

For example, given input 43261596 (represented in binary as 00000010100101000001111010011100), return 964176192 (represented in binary as 00111001011110000010100101000000).

Follow up:
If this function is called many times, how would you optimize it?

https://leetcode.com/problems/reverse-bits/

My note: if this is called many times, we can pre-calculate some results.
Of course can't cache all results (2^32) combinations.
Instead, we can cache 8 bits, 256 combinatoins
int[] masks = {0xff000000, 0x00ff0000, 0x0000ff00, 0x000000ff}
reversedBits = cache[n & masks[i] >> (3 - i) * 8]
retValue = retValue | reversedBits << i * 8
 */

public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        int retValue = 0;
        for (int i = 0; i < 32; i++)
            if (((1 << i) & n) != 0)
                retValue = retValue | (1 << (31 - i));
        return retValue;
    }
}
